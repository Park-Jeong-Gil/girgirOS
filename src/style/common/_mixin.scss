
@mixin mo-over {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: 768px) and (max-width: 1172px) {
    @content;
  }
}
@mixin tablet-over {
  @media (min-width: 768px)  {
    @content;
  }
}

@mixin pc {
  @media (min-width: 1173px) {
    @content;
  }
}

@mixin Pretendard {
	font-family: 'Pretendard';
	letter-spacing: -0.5px;
}

@mixin font($name: null, $font-size: 14px, $weight: null, $line-height: null) {
	@if type-of($name) != null {
		font-family: $name, sans-serif;
	}
	font-size: $font-size;
	line-height: 150%;
	@if type-of($weight) != null {
		font-weight: $weight;
	}
}

@mixin clearfix {
	&::after {
		display: block;
		clear: both;
		content: '';
	}
}

/* place holder */
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}

@mixin blind{
	position: absolute;
	clip: rect(0 0 0 0);
	font-size: 1px;
	color: transparent;
	width: 1px;
	height: 1px;
	margin: -1px;
	overflow: hidden;
}

@mixin flicker {
	content:'';
	display:block;
	position:absolute;
	top:0;
	left:0;
	bottom:0;
	right:0;
	background:transparentize($screen-background,0.9);
	opacity:0;
	z-index:2;
	pointer-events:none;
	animation: flicker 0.01s infinite;
}

@mixin scanlines {
	content:'';
	display:block;
	position:absolute;
	top:0;
	left:0;
	bottom:0;
	right:0;
	background:linear-gradient(transparentize($screen-background,1) 50%, transparentize(darken($screen-background,10),0.75) 50%), linear-gradient(90deg,transparentize(#ff0000,0.94),transparentize(#00ff00,0.98),transparentize(#0000ff,0.94));
	z-index:20;
	background-size:100% 2px, 3px 100%;
	pointer-events:none;
}

@function to-string($value) {
  @if type-of($value) == "string" {
    @return $value;
  } @else if type-of($value) == "list" {
    $str: "";
    @each $item in $value {
      $str: $str + $item + " ";
    }
    @return unquote($str);
  } @else {
    @return quote($value);
  }
}

@function selector-replace($selector, $search, $replace) {
  $selector-str: to-string($selector);
  $search-str: to-string($search);
  $replace-str: to-string($replace);
  @return unquote(str-replace(quote($selector-str), quote($search-str), quote($replace-str)));
}

@mixin parent-selector($parent, $value) {
  @at-root #{selector-replace(&, $parent, $parent + $value)} {
    @content;
  }
}

@function str-to-list($string, $separator: " ", $startAt: 1) {
	$workStr: str-slice($string, $startAt);
	$list: ();
	$indexOfFirstSpace: str-index($workStr, $separator);
	@if $indexOfFirstSpace==null {
		$list: ($workStr);
	} @else {
		$list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
		$list: join($list, str-to-list($workStr, $startAt: $indexOfFirstSpace + 1));
	}
	@return $list;
}

@function parent-append($appendix, $parent, $at-start) {
	$parentSelector: str-to-list(#{&});
	$length: length($parentSelector);
	@if $parent >=$length or $parent < 0 {
		@error "Index '#{$parent}' is out of range";
	}
	$pos: $length - $parent;
	@if $at-start == false {
		$selector: set-nth($parentSelector, $pos, nth($parentSelector, $pos) + $appendix);
		@return $selector;
	}
	@if $at-start == true {
		$selector: set-nth($parentSelector, $pos, $appendix + nth($parentSelector, $pos));
		@return $selector;
	}
}

/// Append defined string to parent selector
/// @require {function} parent-append
/// @param {String} $appendix - selector that we want append to parent
/// @param {Number} $parent [1] - index of parent selector
/// @param {Boolean} $at-start [false] - append to start of parent selector
/// // Usage
// .ancestor {
//   display: inline-flex;

//   .grandparent {
//     padding: 32px;
//     background-color: lightgreen;

//     .parent {
//       padding: 32px;
//       background-color: blue;

//       .elem {
//         padding: 16px;
//         background-color: white;

//         @include parent-append(":focus", 3) {
//           box-shadow: inset 0 0 0 8px aqua;
//         }

//         @include parent-append(":hover") {
//           background-color: fuchsia;
//         }

//         @include parent-append("p", 0, true) {
//           background-color: green;
//         }
//       }
//     }
//   }
// }
/// @result
/// .ancestor:focus .grandparent .parent .elem {box-shadow: inset 0 0 0 8px aqua;}
/// .ancestor .grandparent .parent:hover .elem {background-color: fuchsia;}
/// .ancestor .grandparent .parent p.elem {background-color: green;}
///
@mixin parent-append($appendix, $parent: 1, $at-start: false) {
	@at-root #{parent-append($appendix, $parent, $at-start)} {
		@content;
	}
}


